
/* 879. Profitable Schemes
   Link: https://leetcode.com/problems/profitable-schemes/description/
*/
class Solution {
public:
       int profitableSchemes(int G, int P, vector<int>& group, vector<int>& profit) {
        const long long mod = 1e9 + 7;
        vector<vector<long long>> dp(G+1, vector<long long>(P+1,0));
        dp[0][0] = 1;
        for(int i=0;i<group.size();i++){
            for(int g=G-group[i];g>=0;g--){
                auto g1 = g+group[i];              
                for(int p=P; p>=0;p--){
                    auto p1 = min(P, p + profit[i]);
                    dp[g1][p1] += dp[g][p]; dp[g1][p1] %= mod;
                }
            }
        }
        return accumulate(dp.begin(), dp.end(), 0LL, [=](auto sum, auto& v){return sum+v[P];}) % mod;
    }
};
