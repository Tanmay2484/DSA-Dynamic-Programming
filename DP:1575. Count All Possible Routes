/* 1575. Count All Possible Routes
Link: https://leetcode.com/problems/count-all-possible-routes/description/
*/
class Solution {
    const int M = 1000000007;
    
    void add(int &x, int y) {
        if ((x += y) >= M) x -= M;
    }

public:
    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {
        const int n = locations.size();
        vector<vector<int>> dp(fuel + 1, vector<int>(n));
        dp[fuel][start] = 1;
        for (int i = fuel; i >= 0; --i) {
            for (int j = 0; j < n; ++j) {
                if (dp[i][j]) {
                    for (int k = 0; k < n; ++k) {
                        if (k != j) {
                            const int f = abs(locations[k] - locations[j]);
                            if (f <= i) {
                                add(dp[i - f][k], dp[i][j]);
                            }
                        }
                    }
                }
            }
        }
        int r = 0;
        for (int i = 0; i <= fuel; ++i) {
            add(r, dp[i][finish]);
        }
        return r;
    }
};
