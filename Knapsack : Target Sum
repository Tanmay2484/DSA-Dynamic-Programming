/* Target Sum 
   available in leetcode
    link : https://leetcode.com/problems/target-sum/

class Solution {
public:
    /* The questions is same as another famous dp question
       is "Count the number of subsets with  a given differnce "
      This question language is a bit ahead of "diff" question where they are talking about
      however we want the matching subsets for the sum*/
    int countSubsets(vector<int>& nums, int n, int sum)
    {
        int dp[n+1][sum+1];

        for(int i=0; i<=n; i++)
        {
            for(int j=0; j<=sum; j++)
            {
                if(i==0)
                    dp[i][j]=0;
                if(j==0)
                    dp[i][j]=1;
            }
        }


        for(int i=1; i<=n; i++)
        {
            for(int j=0; j<=sum; j++)
            {
                if(nums[i-1]<=j)
                    dp[i][j]=dp[i-1][j-nums[i-1]]+dp[i-1][j];
                else
                    dp[i][j]=dp[i-1][j];
            }
        }

        return dp[n][sum];  
    }

    int findTargetSumWays(vector<int>& nums, int target)
    {
         target=abs(target);
         int n=nums.size();
         int totalSum=0;

         for(int i=0; i<n; i++)
             totalSum+=nums[i];

        int sum=(totalSum+target)/2;
        if(totalSum<target||(totalSum+target)%2!=0)
            return 0;
        
         return countSubsets(nums, n,sum);
    }  
};
