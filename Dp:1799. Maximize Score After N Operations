/* 1799. Maximize Score After N Operations
   Link: https://leetcode.com/problems/maximize-score-after-n-operations/description/
*/
class Solution {
    unordered_map<int, int>memo ;
    int n ;
    int dfs(int bitmask, const vector<int>& nums, int round){
        if(round > n/2)
            return 0 ;
        if(memo.find(bitmask) != memo.end() )
            return memo[bitmask] ;
        int ret = 0 ;
        for(int i = 0; i < n; i++){
            if((bitmask >> i) & 1)
                continue ;
            for(int j = 0; j < n; j++){
                if(i == j)
                    continue ;
                if((bitmask >> j) & 1)
                    continue ;
                int ans = gcd(nums[i], nums[j]) * round + \
                    dfs(bitmask | (1 << i) | (1 << j), nums, round+1) ;
                ret = max(ret, ans) ;
            }
        }
        memo[bitmask] = ret ;
        return ret ;
    }
public:
    int maxScore(vector<int>& nums) {
        n = nums.size() ;
        int bitmask = 0 ;
        return dfs(bitmask, nums, 1) ;
    }
};
