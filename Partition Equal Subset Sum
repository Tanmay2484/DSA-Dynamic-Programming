 /*
   Questions name : Partition Equal Subset Sum
   available in the leedcode platform 
    link of the question : https://leetcode.com/problems/partition-equal-subset-sum/
 */
 
 bool subsetSum(vector<int>& nums,int sum){
        int n=nums.size();
        bool dp[n+1][sum+1];
        for(int i=0;i<=n;i++) dp[i][0]=true; 
        for(int i=1;i<=sum;i++) dp[0][i]=false;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=sum;j++){     // time and space complexity is O(n*sum)
                if(j<nums[i-1]) dp[i][j]=dp[i-1][j];
                if(j>=nums[i-1]) 
                    dp[i][j] =dp[i - 1][j] || dp[i - 1][j - nums[i - 1]];
                /*
                1.This means that if current element has value greater than ‘current sum    value’ we will copy the answer for previous cases
                
2. And if the current sum value is greater than the ‘ith’ element we will see if any of previous states have already experienced the sum=’j’ OR any previous states experienced a value ‘j – A[i]’ which will solve our purpose. */
            }
        }
        return dp[n][sum];
    }
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(int i=0;i<nums.size();i++) sum+=nums[i];
        if(sum%2!=0) return false; 
        
        return subsetSum(nums,sum/2);
    }
